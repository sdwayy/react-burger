diff --git a/declarations/css.d.ts b/declarations/css.d.ts
new file mode 100644
index 0000000..e712276
--- /dev/null
+++ b/declarations/css.d.ts
@@ -0,0 +1,7 @@
+declare module '*.css' {
+    interface IClassNames {
+        [className: string]: string;
+    }
+    const classNames: IClassNames;
+    export = classNames;
+};
diff --git a/declarations/images.d.ts b/declarations/images.d.ts
new file mode 100644
index 0000000..0f2bb2b
--- /dev/null
+++ b/declarations/images.d.ts
@@ -0,0 +1,3 @@
+declare module '*.png';
+declare module '*.jpg';
+declare module '*.gif';
diff --git a/package-lock.json b/package-lock.json
index 2af6c04..04d3379 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -26,6 +26,9 @@
         "redux": "4.1.2",
         "typescript": "4.5.5",
         "web-vitals": "2.1.4"
+      },
+      "devDependencies": {
+        "@types/react-router-dom": "^5.3.3"
       }
     },
     "node_modules/@ampproject/remapping": {
@@ -3537,6 +3540,12 @@
         "@types/node": "*"
       }
     },
+    "node_modules/@types/history": {
+      "version": "4.7.11",
+      "resolved": "https://registry.npmjs.org/@types/history/-/history-4.7.11.tgz",
+      "integrity": "sha512-qjDJRrmvBMiTx+jyLxvLfJU7UznFuokDv4f3WRuriHKERccVpFU+8XMQUAbDzoiJCsmexxRExQeMwwCdamSKDA==",
+      "dev": true
+    },
     "node_modules/@types/hoist-non-react-statics": {
       "version": "3.3.1",
       "resolved": "https://registry.npmjs.org/@types/hoist-non-react-statics/-/hoist-non-react-statics-3.3.1.tgz",
@@ -3668,6 +3677,27 @@
         "redux": "^4.0.0"
       }
     },
+    "node_modules/@types/react-router": {
+      "version": "5.1.18",
+      "resolved": "https://registry.npmjs.org/@types/react-router/-/react-router-5.1.18.tgz",
+      "integrity": "sha512-YYknwy0D0iOwKQgz9v8nOzt2J6l4gouBmDnWqUUznltOTaon+r8US8ky8HvN0tXvc38U9m6z/t2RsVsnd1zM0g==",
+      "dev": true,
+      "dependencies": {
+        "@types/history": "^4.7.11",
+        "@types/react": "*"
+      }
+    },
+    "node_modules/@types/react-router-dom": {
+      "version": "5.3.3",
+      "resolved": "https://registry.npmjs.org/@types/react-router-dom/-/react-router-dom-5.3.3.tgz",
+      "integrity": "sha512-kpqnYK4wcdm5UaWI3fLcELopqLrHgLqNsdpHauzlQktfkHL3npOSwtj1Uz9oKBAzs7lFtVkV8j83voAz2D8fhw==",
+      "dev": true,
+      "dependencies": {
+        "@types/history": "^4.7.11",
+        "@types/react": "*",
+        "@types/react-router": "*"
+      }
+    },
     "node_modules/@types/resolve": {
       "version": "1.17.1",
       "resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.17.1.tgz",
@@ -8378,6 +8408,13 @@
         "url": "https://opencollective.com/immer"
       }
     },
+    "node_modules/immutable": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/immutable/-/immutable-4.0.0.tgz",
+      "integrity": "sha512-zIE9hX70qew5qTUjSS7wi1iwj/l7+m54KWU247nhM3v806UdGj1yDndXj+IOYxxtW9zyLI+xqFNZjTuDaLUqFw==",
+      "optional": true,
+      "peer": true
+    },
     "node_modules/import-fresh": {
       "version": "3.3.0",
       "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
@@ -13976,6 +14013,24 @@
       "resolved": "https://registry.npmjs.org/sanitize.css/-/sanitize.css-13.0.0.tgz",
       "integrity": "sha512-ZRwKbh/eQ6w9vmTjkuG0Ioi3HBwPFce0O+v//ve+aOq1oeCy7jMV2qzzAlpsNuqpqCBjjriM1lbtZbF/Q8jVyA=="
     },
+    "node_modules/sass": {
+      "version": "1.50.0",
+      "resolved": "https://registry.npmjs.org/sass/-/sass-1.50.0.tgz",
+      "integrity": "sha512-cLsD6MEZ5URXHStxApajEh7gW189kkjn4Rc8DQweMyF+o5HF5nfEz8QYLMlPsTOD88DknatTmBWkOcw5/LnJLQ==",
+      "optional": true,
+      "peer": true,
+      "dependencies": {
+        "chokidar": ">=3.0.0 <4.0.0",
+        "immutable": "^4.0.0",
+        "source-map-js": ">=0.6.2 <2.0.0"
+      },
+      "bin": {
+        "sass": "sass.js"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      }
+    },
     "node_modules/sass-loader": {
       "version": "12.6.0",
       "resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-12.6.0.tgz",
@@ -18770,6 +18825,12 @@
         "@types/node": "*"
       }
     },
+    "@types/history": {
+      "version": "4.7.11",
+      "resolved": "https://registry.npmjs.org/@types/history/-/history-4.7.11.tgz",
+      "integrity": "sha512-qjDJRrmvBMiTx+jyLxvLfJU7UznFuokDv4f3WRuriHKERccVpFU+8XMQUAbDzoiJCsmexxRExQeMwwCdamSKDA==",
+      "dev": true
+    },
     "@types/hoist-non-react-statics": {
       "version": "3.3.1",
       "resolved": "https://registry.npmjs.org/@types/hoist-non-react-statics/-/hoist-non-react-statics-3.3.1.tgz",
@@ -18901,6 +18962,27 @@
         "redux": "^4.0.0"
       }
     },
+    "@types/react-router": {
+      "version": "5.1.18",
+      "resolved": "https://registry.npmjs.org/@types/react-router/-/react-router-5.1.18.tgz",
+      "integrity": "sha512-YYknwy0D0iOwKQgz9v8nOzt2J6l4gouBmDnWqUUznltOTaon+r8US8ky8HvN0tXvc38U9m6z/t2RsVsnd1zM0g==",
+      "dev": true,
+      "requires": {
+        "@types/history": "^4.7.11",
+        "@types/react": "*"
+      }
+    },
+    "@types/react-router-dom": {
+      "version": "5.3.3",
+      "resolved": "https://registry.npmjs.org/@types/react-router-dom/-/react-router-dom-5.3.3.tgz",
+      "integrity": "sha512-kpqnYK4wcdm5UaWI3fLcELopqLrHgLqNsdpHauzlQktfkHL3npOSwtj1Uz9oKBAzs7lFtVkV8j83voAz2D8fhw==",
+      "dev": true,
+      "requires": {
+        "@types/history": "^4.7.11",
+        "@types/react": "*",
+        "@types/react-router": "*"
+      }
+    },
     "@types/resolve": {
       "version": "1.17.1",
       "resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.17.1.tgz",
@@ -22365,6 +22447,13 @@
       "resolved": "https://registry.npmjs.org/immer/-/immer-9.0.12.tgz",
       "integrity": "sha512-lk7UNmSbAukB5B6dh9fnh5D0bJTOFKxVg2cyJWTYrWRfhLrLMBquONcUs3aFq507hNoIZEDDh8lb8UtOizSMhA=="
     },
+    "immutable": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/immutable/-/immutable-4.0.0.tgz",
+      "integrity": "sha512-zIE9hX70qew5qTUjSS7wi1iwj/l7+m54KWU247nhM3v806UdGj1yDndXj+IOYxxtW9zyLI+xqFNZjTuDaLUqFw==",
+      "optional": true,
+      "peer": true
+    },
     "import-fresh": {
       "version": "3.3.0",
       "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
@@ -26279,6 +26368,18 @@
       "resolved": "https://registry.npmjs.org/sanitize.css/-/sanitize.css-13.0.0.tgz",
       "integrity": "sha512-ZRwKbh/eQ6w9vmTjkuG0Ioi3HBwPFce0O+v//ve+aOq1oeCy7jMV2qzzAlpsNuqpqCBjjriM1lbtZbF/Q8jVyA=="
     },
+    "sass": {
+      "version": "1.50.0",
+      "resolved": "https://registry.npmjs.org/sass/-/sass-1.50.0.tgz",
+      "integrity": "sha512-cLsD6MEZ5URXHStxApajEh7gW189kkjn4Rc8DQweMyF+o5HF5nfEz8QYLMlPsTOD88DknatTmBWkOcw5/LnJLQ==",
+      "optional": true,
+      "peer": true,
+      "requires": {
+        "chokidar": ">=3.0.0 <4.0.0",
+        "immutable": "^4.0.0",
+        "source-map-js": ">=0.6.2 <2.0.0"
+      }
+    },
     "sass-loader": {
       "version": "12.6.0",
       "resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-12.6.0.tgz",
diff --git a/package.json b/package.json
index 8e504d7..c7cee45 100644
--- a/package.json
+++ b/package.json
@@ -46,5 +46,8 @@
       "last 1 firefox version",
       "last 1 safari version"
     ]
+  },
+  "devDependencies": {
+    "@types/react-router-dom": "^5.3.3"
   }
 }
diff --git a/src/components/app-header/app-header.jsx b/src/components/app-header/app-header.tsx
similarity index 100%
rename from src/components/app-header/app-header.jsx
rename to src/components/app-header/app-header.tsx
diff --git a/src/components/app/app.module.css b/src/components/app/app.module.css
index 53ad591..fcb05f9 100644
--- a/src/components/app/app.module.css
+++ b/src/components/app/app.module.css
@@ -15,6 +15,7 @@
 
 html,
 body {
+  max-width: 100vw;
   min-height: 100%;
   height: 100%;
 }
diff --git a/src/components/app/app.jsx b/src/components/app/app.tsx
similarity index 94%
rename from src/components/app/app.jsx
rename to src/components/app/app.tsx
index 18bd7e4..366af01 100644
--- a/src/components/app/app.jsx
+++ b/src/components/app/app.tsx
@@ -1,7 +1,7 @@
 import React, { useEffect } from 'react';
 import { useDispatch } from 'react-redux';
 import { BrowserRouter as Router } from 'react-router-dom';
-import styles from './app.module.css';
+import './app.module.css';
 
 import ModalSwitch from '../modal-switch/modal-switch';
 import Header from '../app-header/app-header';
diff --git a/src/components/burger-constructor/burger-constructor.jsx b/src/components/burger-constructor/burger-constructor.tsx
similarity index 87%
rename from src/components/burger-constructor/burger-constructor.jsx
rename to src/components/burger-constructor/burger-constructor.tsx
index bd0edc0..6dbc542 100644
--- a/src/components/burger-constructor/burger-constructor.jsx
+++ b/src/components/burger-constructor/burger-constructor.tsx
@@ -1,8 +1,9 @@
 import React, { useMemo } from 'react';
 import {
-  useDispatch,
-  useSelector,
-} from 'react-redux';
+  useAppDispatch,
+  useAppSelector,
+} from '../../utils/hooks';
+
 import { useHistory, useLocation } from 'react-router-dom';
 import { useDrop } from 'react-dnd';
 
@@ -26,7 +27,8 @@ import {
   moveFilling,
   toggleError,
 } from '../../services/store/slices/currentOrder';
-import { setCreatedOrder } from '../../services/store/slices/createdOrder';
+import { resetCreatedOrder } from '../../services/store/slices/createdOrder';
+import { TIngredient } from '../../utils/types';
 
 const text = {
   up: 'верх',
@@ -36,10 +38,14 @@ const text = {
   createInProgress: 'Оформляем...',
 };
 
+type TDropItem = {
+  id: string;
+};
+
 const BurgerConstructor = () => {
   const location = useLocation();
   const history = useHistory();
-  const dispatch = useDispatch();
+  const dispatch = useAppDispatch();
   const {
     currentOrder,
     ingredients,
@@ -47,7 +53,7 @@ const BurgerConstructor = () => {
     auth: {
       user,
     },
-  } = useSelector(state => state);
+  } = useAppSelector(state => state);
 
   const {
     bun,
@@ -62,12 +68,12 @@ const BurgerConstructor = () => {
     return filling.reduce((acc, { price }) =>  acc + price, bunPrice);
   }, [bun, filling]);
 
-  const [, dropRef] = useDrop({
+  const [, dropRef] = useDrop<TDropItem>({
     accept: 'ingredient',
     drop({ id }) {
       const itemData = ingredients.list.find(({ _id }) =>  _id === id);
 
-      if (itemData.type === 'bun') {
+      if (itemData?.type === 'bun') {
         dispatch(setBun(itemData));
       } else {
         dispatch(addFilling(itemData));
@@ -79,7 +85,7 @@ const BurgerConstructor = () => {
     if (hasError) {
       dispatch(toggleError());
     }
-    dispatch(setCreatedOrder(null));
+    dispatch(resetCreatedOrder());
   };
 
   const onCreateOrderBtnClick = () => {
@@ -97,11 +103,11 @@ const BurgerConstructor = () => {
     dispatch(fetchOrder(currentOrder));
   };
 
-  const handleRemoveFillingItem = itemData => {
+  const handleRemoveFillingItem = (itemData: TIngredient) => {
     dispatch(removeFilling(itemData));
   };
 
-  const handleMoveFillingItem = (currentIndex, newIndex) => {
+  const handleMoveFillingItem = (currentIndex: number, newIndex: number) => {
     dispatch(moveFilling({currentIndex, newIndex}));
   };
 
@@ -163,7 +169,7 @@ const BurgerConstructor = () => {
         </Button>
       </footer>
       {
-        (createdOrder || hasError)
+        (createdOrder?.number || hasError)
         && (
           <Modal closeModal={closeModal} className={styles['order-modal']}>
             {
diff --git a/src/components/burger-constructor/burger-filling-card.jsx b/src/components/burger-constructor/burger-filling-card.tsx
similarity index 78%
rename from src/components/burger-constructor/burger-filling-card.jsx
rename to src/components/burger-constructor/burger-filling-card.tsx
index 12ff66d..38d2dff 100644
--- a/src/components/burger-constructor/burger-filling-card.jsx
+++ b/src/components/burger-constructor/burger-filling-card.tsx
@@ -1,12 +1,23 @@
 import React, { useRef } from 'react';
-import PropTypes from 'prop-types';
 import { useDrag, useDrop } from 'react-dnd';
 import styles from './burger-constructor.module.css';
-import { ingredientPropTypes } from '../../utils/prop-types';
 
 import IngredientCardContent from './ingredient-card-content';
+import { TIngredient } from '../../utils/types';
 
-const BurgerFillingCard = ({ data, index, handleRemove, handleMove }) => {
+type TBurgerFillingCardProps = {
+  data: TIngredient;
+  index: number;
+  handleRemove: Function;
+  handleMove: Function;
+};
+
+type TDragItem = {
+  key: string;
+  index: number;
+};
+
+const BurgerFillingCard: React.FC<TBurgerFillingCardProps> = ({ data, index, handleRemove, handleMove }) => {
   const {
     name,
     price,
@@ -14,9 +25,9 @@ const BurgerFillingCard = ({ data, index, handleRemove, handleMove }) => {
     key,
   } = data;
 
-  const ref = useRef();
+  const ref = useRef<HTMLLIElement>(null);
 
-  const [, dropRef] = useDrop({
+  const [, dropRef] = useDrop<TDragItem>({
     accept: 'fillingItem',
     hover(item, monitor) {
       if (!ref.current) {
@@ -33,8 +44,12 @@ const BurgerFillingCard = ({ data, index, handleRemove, handleMove }) => {
       const hoverBoundingRect = ref.current?.getBoundingClientRect();
       const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;
       const clientOffset = monitor.getClientOffset();
+
+      if (!clientOffset) return;
+
       const hoverClientY = clientOffset.y - hoverBoundingRect.top;
 
+
       if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
         return;
       }
@@ -77,11 +92,4 @@ const BurgerFillingCard = ({ data, index, handleRemove, handleMove }) => {
   );
 };
 
-BurgerFillingCard.propTypes = {
-  data: ingredientPropTypes.isRequired,
-  index: PropTypes.number.isRequired,
-  handleRemove: PropTypes.func.isRequired,
-  handleMove: PropTypes.func.isRequired,
-};
-
 export default BurgerFillingCard;
diff --git a/src/components/burger-constructor/ingredient-card-content.jsx b/src/components/burger-constructor/ingredient-card-content.jsx
deleted file mode 100644
index 577ae3c..0000000
--- a/src/components/burger-constructor/ingredient-card-content.jsx
+++ /dev/null
@@ -1,33 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import styles from './burger-constructor.module.css';
-
-import {
-  ConstructorElement,
-  DragIcon,
-} from '@ya.praktikum/react-developer-burger-ui-components';
-
-const IngredientCardContent = ({
-  dragable,
-  ...constructorElementProps
-}) => (
-  <>
-    {
-      dragable
-      && <span className={`${styles['drag-icon']} mr-2`}><DragIcon type="primary" /></span>
-    }
-    <ConstructorElement { ...constructorElementProps }/>
-  </>
-);
-
-IngredientCardContent.propTypes = {
-  dragable: PropTypes.bool,
-  type: PropTypes.oneOf(['top', 'bottom']),
-  isLocked: PropTypes.bool,
-  handleClose: PropTypes.func,
-  text: PropTypes.string.isRequired,
-  thumbnail: PropTypes.string.isRequired,
-  price: PropTypes.number.isRequired,
-};
-
-export default IngredientCardContent;
diff --git a/src/components/burger-constructor/ingredient-card-content.tsx b/src/components/burger-constructor/ingredient-card-content.tsx
new file mode 100644
index 0000000..1950051
--- /dev/null
+++ b/src/components/burger-constructor/ingredient-card-content.tsx
@@ -0,0 +1,42 @@
+import React from 'react';
+import styles from './burger-constructor.module.css';
+
+import {
+  ConstructorElement,
+  DragIcon,
+} from '@ya.praktikum/react-developer-burger-ui-components';
+
+type TIngredientCardContentProps = {
+  dragable?: boolean;
+} & React.ComponentProps<typeof ConstructorElement>;
+
+const IngredientCardContent: React.FC<TIngredientCardContentProps> = ({
+  dragable,
+  type,
+  isLocked,
+  handleClose,
+  text,
+  thumbnail,
+  price,
+}) => {
+  const constructorElementProps = {
+    type,
+    isLocked,
+    handleClose,
+    text,
+    thumbnail,
+    price,
+  };
+
+  return (
+    <>
+      {
+        dragable
+        && <span className={`${styles['drag-icon']} mr-2`}><DragIcon type="primary" /></span>
+      }
+      <ConstructorElement { ...constructorElementProps }/>
+    </>
+  );
+};
+
+export default IngredientCardContent;
diff --git a/src/components/burger-ingredients/burger-ingredients.jsx b/src/components/burger-ingredients/burger-ingredients.tsx
similarity index 69%
rename from src/components/burger-ingredients/burger-ingredients.jsx
rename to src/components/burger-ingredients/burger-ingredients.tsx
index 02296b6..456201f 100644
--- a/src/components/burger-ingredients/burger-ingredients.jsx
+++ b/src/components/burger-ingredients/burger-ingredients.tsx
@@ -4,15 +4,16 @@ import React, {
   useEffect,
   useRef,
 } from 'react';
-import { useSelector } from 'react-redux';
+import { useAppSelector } from '../../utils/hooks';
 import styles from './burger-ingredients.module.css';
 
 import {
   Tab,
 } from '@ya.praktikum/react-developer-burger-ui-components';
 import Ingredients from './ingredients';
+import { TIngredient } from '../../utils/types';
 
-const categories = ['bun', 'sauce', 'main'];
+const categories = ['bun', 'sauce', 'main'] as const;
 const text = {
   ingredientCategories: {
     bun: 'Булки',
@@ -23,10 +24,10 @@ const text = {
 };
 
 const BurgerIngredients = () => {
-  const { list: ingredients } = useSelector(state => state.ingredients);
+  const { list: ingredients } = useAppSelector(state => state.ingredients);
 
   const itemsDataByCategory = useMemo(
-    () => ingredients.reduce((acc, item) => {
+    () => ingredients.reduce((acc: { [key: string]: TIngredient[] }, item: TIngredient) => {
       const { type } = item;
 
       if (!acc[type]) {
@@ -40,9 +41,9 @@ const BurgerIngredients = () => {
     [ingredients],
   );
 
-  const prevTab = useRef(null);
+  const prevTab = useRef<null | string>(null);
   const [currentTab, setCurrurentTab] = useState(prevTab.current || categories[0]);
-  const ingredientListContainerRef = useRef(null);
+  const ingredientListContainerRef = useRef<HTMLUListElement>(null);
 
   useEffect(() => {
     const ingredientListContainerElement = ingredientListContainerRef.current;
@@ -54,20 +55,25 @@ const BurgerIngredients = () => {
 
     const observer = new IntersectionObserver(entries => {
       entries.forEach(({ isIntersecting, target }) => {
-        const targetCategory = target?.dataset.ingredientCategory;
+        if (target instanceof HTMLElement) {
+          const targetCategory = target?.dataset.ingredientCategory;
 
-        if (isIntersecting && targetCategory !== prevTab.current) {
-          prevTab.current = targetCategory;
-          setCurrurentTab(targetCategory);
+          if (isIntersecting && targetCategory && targetCategory !== prevTab.current) {
+            prevTab.current = targetCategory;
+            setCurrurentTab(targetCategory);
+          }
         }
       })
     }, observerOptions);
 
-    [...ingredientListContainerElement.children].forEach(child => {
-      observer.observe(child);
-    });
+      if (ingredientListContainerElement) {
+        [...Array.from(ingredientListContainerElement.children)].forEach(child => {
+          observer.observe(child);
+        });
+      }
   }, []);
 
+
   const ingredientsListItems = useMemo(
     () => categories.map((category, index) => {
       const items = itemsDataByCategory[category];
@@ -91,7 +97,7 @@ const BurgerIngredients = () => {
   );
 
   const tabs = useMemo(
-    () => categories.map((category, index) => (
+    () => categories.map((category: keyof typeof text.ingredientCategories , index) => (
       <Tab
         value={category}
         active={currentTab === category}
diff --git a/src/components/burger-ingredients/ingredient.jsx b/src/components/burger-ingredients/ingredient.tsx
similarity index 83%
rename from src/components/burger-ingredients/ingredient.jsx
rename to src/components/burger-ingredients/ingredient.tsx
index 1239571..541f625 100644
--- a/src/components/burger-ingredients/ingredient.jsx
+++ b/src/components/burger-ingredients/ingredient.tsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import { useSelector } from 'react-redux';
+import { useAppSelector } from '../../utils/hooks';
 import {
   useLocation,
   Link,
@@ -8,14 +8,18 @@ import { useDrag } from 'react-dnd';
 
 import styles from './burger-ingredients.module.css';
 
-import { ingredientPropTypes } from '../../utils/prop-types';
-
 import {
   CurrencyIcon,
   Counter,
 } from '@ya.praktikum/react-developer-burger-ui-components';
 
-const Ingredient = ({ data }) => {
+import { TIngredient } from '../../utils/types';
+
+type TIngredientProps = {
+  data: TIngredient;
+};
+
+const Ingredient: React.FC<TIngredientProps> = ({ data }) => {
   const location = useLocation();
 
   const { 
@@ -25,7 +29,7 @@ const Ingredient = ({ data }) => {
     _id,
   } = data;
 
-  const { bun, filling } = useSelector(state => state.currentOrder);
+  const { bun, filling } = useAppSelector(state => state.currentOrder);
 
   const [, ref] = useDrag({
     type: 'ingredient',
@@ -66,8 +70,4 @@ const Ingredient = ({ data }) => {
   );
 };
 
-Ingredient.propTypes = {
-  data: ingredientPropTypes.isRequired,
-};
-
 export default Ingredient;
diff --git a/src/components/burger-ingredients/ingredients.jsx b/src/components/burger-ingredients/ingredients.tsx
similarity index 68%
rename from src/components/burger-ingredients/ingredients.jsx
rename to src/components/burger-ingredients/ingredients.tsx
index 74cb7b1..ef89fc5 100644
--- a/src/components/burger-ingredients/ingredients.jsx
+++ b/src/components/burger-ingredients/ingredients.tsx
@@ -2,9 +2,13 @@ import React from 'react';
 import styles from './burger-ingredients.module.css';
 
 import Ingredient from './ingredient';
-import { ingredientListPropTypes } from '../../utils/prop-types';
+import { TIngredient } from '../../utils/types';
 
-const Ingredients = ({ itemsData }) => (
+type TIngredientsProps = {
+  itemsData: TIngredient[];
+};
+
+const Ingredients: React.FC<TIngredientsProps> = ({ itemsData }) => (
   <ul className={`${styles.list} ${styles['ingredients-card-list']} pl-4 pr-4`}>
     {
       itemsData.map(itemData => (
@@ -17,8 +21,4 @@ const Ingredients = ({ itemsData }) => (
   </ul>
 );
 
-Ingredients.propTypes = {
-  itemsData: ingredientListPropTypes.isRequired,
-};
-
 export default Ingredients;
diff --git a/src/components/ingredient-details/ingredient-details.jsx b/src/components/ingredient-details/ingredient-details.tsx
similarity index 90%
rename from src/components/ingredient-details/ingredient-details.jsx
rename to src/components/ingredient-details/ingredient-details.tsx
index c8a8e43..3558ecd 100644
--- a/src/components/ingredient-details/ingredient-details.jsx
+++ b/src/components/ingredient-details/ingredient-details.tsx
@@ -1,5 +1,5 @@
 import React from "react";
-import { useSelector } from "react-redux";
+import { useAppSelector } from '../../utils/hooks';
 import { useRouteMatch } from 'react-router-dom';
 import styles from './ingredient-details.module.css';
 
@@ -10,13 +10,17 @@ const text = {
   carbohydrates: 'Углводы, г',
 };
 
+type TMatchParams = {
+  id: string,
+};
+
 const IngredientDetails = () => {
-  const match = useRouteMatch('/ingredients/:id');
+  const match = useRouteMatch<TMatchParams>('/ingredients/:id');
   const {
     ingredients: {
       list,
     },
-  } = useSelector(state => state);
+  } = useAppSelector(state => state);
 
   if (!match) return null;
 
diff --git a/src/components/modal-overlay/modal-overlay.jsx b/src/components/modal-overlay/modal-overlay.tsx
similarity index 55%
rename from src/components/modal-overlay/modal-overlay.jsx
rename to src/components/modal-overlay/modal-overlay.tsx
index 804b0de..adf9918 100644
--- a/src/components/modal-overlay/modal-overlay.jsx
+++ b/src/components/modal-overlay/modal-overlay.tsx
@@ -1,16 +1,15 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 import styles from './modal-overlay.module.css';
 
-const ModalOverlay = ({ closeModal }) => (
+type TModalOverlayProps = {
+  closeModal: () => void;
+};
+
+const ModalOverlay: React.FC<TModalOverlayProps> = ({ closeModal }) => (
   <div
     className={styles.overlay}
     onClick={closeModal}
   />
 );
 
-ModalOverlay.propTypes = {
-  closeModal: PropTypes.func.isRequired,
-};
-
 export default ModalOverlay;
diff --git a/src/components/modal-switch/modal-switch.jsx b/src/components/modal-switch/modal-switch.tsx
similarity index 91%
rename from src/components/modal-switch/modal-switch.jsx
rename to src/components/modal-switch/modal-switch.tsx
index 5f6641f..799b17c 100644
--- a/src/components/modal-switch/modal-switch.jsx
+++ b/src/components/modal-switch/modal-switch.tsx
@@ -5,6 +5,7 @@ import {
   Switch,
   Route,
 } from 'react-router-dom';
+import { Location } from 'history';
 
 import ProtectedRoute from '../protected-route/protected-route';
 import {
@@ -22,8 +23,12 @@ import {
 import IngredientDetails from "../ingredient-details/ingredient-details";
 import Modal from "../modal/modal";
 
+type TModalSwitchLocationState = {
+  background: Location;
+};
+
 const ModalSwitch = () => {
-  const location = useLocation();
+  const location = useLocation<TModalSwitchLocationState>();
   const { goBack } = useHistory();
   const { state } = location;
   const background = state?.background;
diff --git a/src/components/modal/modal.jsx b/src/components/modal/modal.tsx
similarity index 80%
rename from src/components/modal/modal.jsx
rename to src/components/modal/modal.tsx
index 3a5b564..77e1f75 100644
--- a/src/components/modal/modal.jsx
+++ b/src/components/modal/modal.tsx
@@ -1,5 +1,4 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 import { createPortal } from 'react-dom';
 import styles from './modal.module.css';
 
@@ -10,13 +9,19 @@ import ModalOverlay from '../modal-overlay/modal-overlay';
 
 const modalRoot = document.getElementById("react-modals");
 
-const Modal = ({
+type TModalProps = {
+  title?: string;
+  closeModal: () => void;
+  className?: string;
+};
+
+const Modal: React.FC<TModalProps> = ({
   title,
   children,
   closeModal,
   className,
 }) => {
-  const onDocumentKeydown = event => {
+  const onDocumentKeydown = (event: KeyboardEvent) => {
     const { key } = event;
 
     switch (key) {
@@ -37,6 +42,8 @@ const Modal = ({
     };
   }, []);
 
+  if (!modalRoot) return null;
+
   return createPortal((
     <>
       <div className={`${styles.modal} pl-10 pr-10 pt-10 pb-15 ${className}`}>
@@ -55,14 +62,4 @@ const Modal = ({
   ), modalRoot);
 };
 
-Modal.propTypes = {
-  title: PropTypes.string,
-  children: PropTypes.oneOfType([
-    PropTypes.arrayOf(PropTypes.node),
-    PropTypes.node,
-  ]).isRequired,
-  closeModal: PropTypes.func.isRequired,
-  className: PropTypes.string,
-};
-
 export default Modal;
diff --git a/src/components/nav-item/nav-item.jsx b/src/components/nav-item/nav-item.tsx
similarity index 70%
rename from src/components/nav-item/nav-item.jsx
rename to src/components/nav-item/nav-item.tsx
index 28b05a4..a7dd8d4 100644
--- a/src/components/nav-item/nav-item.jsx
+++ b/src/components/nav-item/nav-item.tsx
@@ -1,13 +1,21 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 import { Link, useRouteMatch } from 'react-router-dom';
 
-const NavItem = ({
+type TNavItemProps = {
+  title: string;
+  exact?: boolean;
+  Icon?: React.ElementType;
+  className: string;
+  textType?: string;
+  path: string;
+};
+
+const NavItem: React.FC<TNavItemProps> = ({
   title,
   exact,
   Icon,
   className,
-  textType,
+  textType = 'default',
   path,
 }) => {
   const match = useRouteMatch(path);
@@ -34,17 +42,4 @@ const NavItem = ({
       )
 };
 
-NavItem.propTypes = {
-  title: PropTypes.string.isRequired,
-  exact: PropTypes.bool,
-  Icon: PropTypes.elementType,
-  className: PropTypes.string,
-  textType: PropTypes.string.isRequired,
-  path: PropTypes.string.isRequired,
-};
-
-NavItem.defaultProps = {
-  textType: 'default',
-};
-
 export default NavItem;
diff --git a/src/components/order-details/order-details.jsx b/src/components/order-details/order-details.tsx
similarity index 89%
rename from src/components/order-details/order-details.jsx
rename to src/components/order-details/order-details.tsx
index ebf75de..432c676 100644
--- a/src/components/order-details/order-details.jsx
+++ b/src/components/order-details/order-details.tsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import { useSelector } from 'react-redux';
+import { useAppSelector } from '../../utils/hooks';
 import styles from './order-details.module.css';
 
 import DoneIcon1x from '../../images/done.png';
@@ -12,9 +12,11 @@ const text = {
 };
 
 const OrderDetails = () => {
-  const { createdOrder } = useSelector(state => state);
+  const { createdOrder } = useAppSelector(state => state);
   const { number } = createdOrder;
 
+  if (!number) return null;
+
   return (
     <>
       <p className={`${styles['order-id']} pt-10 pb-7`}>
diff --git a/src/components/protected-route/protected-route.jsx b/src/components/protected-route/protected-route.jsx
deleted file mode 100644
index 5458243..0000000
--- a/src/components/protected-route/protected-route.jsx
+++ /dev/null
@@ -1,34 +0,0 @@
-import React from 'react';
-import { useSelector } from 'react-redux';
-import { Redirect, Route } from 'react-router-dom';
-import PropTypes from 'prop-types';
-
-const ProtectedRoute = ({ children, ...rest }) => {
-  const { user, isUserLoaded } = useSelector(state => state.auth);
-
-  if (!isUserLoaded) return null;
-
-  return (
-    <Route
-      {...rest}
-      render={({ location }) => user
-        ? children
-        : <Redirect
-            to={{
-              pathname: '/login',
-              state: { from: location }
-            }}
-          />
-      }
-    />
-  );
-};
-
-ProtectedRoute.propTypes = {
-  children: PropTypes.oneOfType([
-    PropTypes.arrayOf(PropTypes.node),
-    PropTypes.node
-  ]).isRequired,
-};
-
-export default ProtectedRoute;
diff --git a/src/components/protected-route/protected-route.tsx b/src/components/protected-route/protected-route.tsx
new file mode 100644
index 0000000..a0f65cc
--- /dev/null
+++ b/src/components/protected-route/protected-route.tsx
@@ -0,0 +1,26 @@
+import React from 'react';
+import { useAppSelector } from '../../utils/hooks';
+import { Redirect, Route, RouteProps } from 'react-router-dom';
+
+const ProtectedRoute: React.FC<RouteProps> = ({ children, ...rest }) => {
+  const { user, isUserLoaded } = useAppSelector(state => state.auth);
+
+  if (!isUserLoaded) return null;
+
+  return (
+    <Route
+      {...rest}
+      render={({ location }) => user
+        ? children
+        : <Redirect
+            to={{
+              pathname: '/login',
+              state: { from: location }
+            }}
+          />
+      }
+    />
+  );
+};
+
+export default ProtectedRoute;
diff --git a/src/index.jsx b/src/index.tsx
similarity index 100%
rename from src/index.jsx
rename to src/index.tsx
diff --git a/src/mocks/data.js b/src/mocks/data.ts
similarity index 100%
rename from src/mocks/data.js
rename to src/mocks/data.ts
diff --git a/src/mocks/order-data.js b/src/mocks/order-data.ts
similarity index 100%
rename from src/mocks/order-data.js
rename to src/mocks/order-data.ts
diff --git a/src/pages/constructor/constructor.jsx b/src/pages/constructor/constructor.tsx
similarity index 92%
rename from src/pages/constructor/constructor.jsx
rename to src/pages/constructor/constructor.tsx
index 593b776..17a06eb 100644
--- a/src/pages/constructor/constructor.jsx
+++ b/src/pages/constructor/constructor.tsx
@@ -1,7 +1,5 @@
 import React from 'react';
-import {
-  useSelector,
-} from 'react-redux';
+
 import { DndProvider } from 'react-dnd';
 import { HTML5Backend } from 'react-dnd-html5-backend';
 
@@ -10,6 +8,8 @@ import styles from './constructor.module.css';
 import BurgerIngredients from '../../components/burger-ingredients/burger-ingredients';
 import BurgerConstructor from '../../components/burger-constructor/burger-constructor';
 
+import { useAppSelector } from '../../utils/hooks';
+
 const text = {
   errorMessage: 'В приложении произошла ошибка. Пожалуйста, перезагрузите страницу',
   errorTitle: 'Что-то пошло не так :(',
@@ -17,7 +17,7 @@ const text = {
 };
 
 export const ConstructorPage = () => {
-  const { ingredients } = useSelector(state => state);
+  const { ingredients } = useAppSelector(state => state);
   const { hasError, isLoading, list } = ingredients;
 
   return (
diff --git a/src/pages/forgot-password/forgot-password.jsx b/src/pages/forgot-password/forgot-password.tsx
similarity index 86%
rename from src/pages/forgot-password/forgot-password.jsx
rename to src/pages/forgot-password/forgot-password.tsx
index 8c65f9a..61ab2ca 100644
--- a/src/pages/forgot-password/forgot-password.jsx
+++ b/src/pages/forgot-password/forgot-password.tsx
@@ -1,5 +1,5 @@
 import React, { useState } from 'react';
-import { useSelector } from 'react-redux';
+
 import {
   Link,
   Redirect,
@@ -13,13 +13,15 @@ import {
 } from '@ya.praktikum/react-developer-burger-ui-components';
 
 import routes from '../../routes';
+import { useAppSelector } from '../../utils/hooks';
+import { TLocationState } from '../../utils/types';
 
 export const ForgotPasswordPage = () => {
   const history = useHistory();
-  const location = useLocation();
+  const location = useLocation<TLocationState>();
   const { state } = location;
 
-  const { user } = useSelector(state => state.auth);
+  const { user } = useAppSelector(state => state.auth);
 
   const [formData, setFormData] = useState({
     email: '',
@@ -27,11 +29,11 @@ export const ForgotPasswordPage = () => {
 
   const [error, setError] = useState('');
 
-  const onChange = e => {
+  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {
     setFormData({ ...formData, [e.target.name]: e.target.value });
   };
 
-  const onFormSubmit = e => {
+  const onFormSubmit = (e: React.FormEvent) => {
     e.preventDefault();
 
     const data = {
@@ -90,7 +92,7 @@ export const ForgotPasswordPage = () => {
               </p>
             )
           }
-          <Button primary={true} size="medium">
+          <Button size="medium">
             Восстановить
           </Button>
         </form>
diff --git a/src/pages/index.js b/src/pages/index.ts
similarity index 100%
rename from src/pages/index.js
rename to src/pages/index.ts
diff --git a/src/pages/ingredient/ingredient.jsx b/src/pages/ingredient/ingredient.tsx
similarity index 100%
rename from src/pages/ingredient/ingredient.jsx
rename to src/pages/ingredient/ingredient.tsx
diff --git a/src/pages/login/login.jsx b/src/pages/login/login.tsx
similarity index 84%
rename from src/pages/login/login.jsx
rename to src/pages/login/login.tsx
index 84ed882..4135eab 100644
--- a/src/pages/login/login.jsx
+++ b/src/pages/login/login.tsx
@@ -1,5 +1,5 @@
 import React, { useState } from 'react';
-import { useDispatch, useSelector } from 'react-redux';
+
 import {
   Link,
   Redirect,
@@ -14,27 +14,29 @@ import {
 } from '@ya.praktikum/react-developer-burger-ui-components';
 
 import { signIn } from '../../services/store/slices/auth';
+import { useAppDispatch, useAppSelector } from '../../utils/hooks';
+import { TLocationState } from '../../utils/types';
 
 export const LoginPage = () => {
-  const { state } = useLocation();
-  const dispatch = useDispatch();
+  const { state } = useLocation<TLocationState>();
+  const dispatch = useAppDispatch();
   const {
     user,
     errors: {
       signIn: loginError,
     },
-  } = useSelector(state => state.auth);
+  } = useAppSelector(state => state.auth);
 
   const [formData, setFormData] = useState({
     email: '',
     password: '',
   });
 
-  const onChange = e => {
+  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {
     setFormData({ ...formData, [e.target.name]: e.target.value });
   };
 
-  const onFormSubmit = e => {
+  const onFormSubmit = (e: React.FormEvent) => {
     e.preventDefault();
     dispatch(signIn(formData));
   };
@@ -70,7 +72,7 @@ export const LoginPage = () => {
             loginError
             && <p className="text text_type_main-default text_color_error">{loginError}</p>
           }
-          <Button primary={true} size="medium">
+          <Button size="medium">
             Войти
           </Button>
         </form>
diff --git a/src/pages/logout/logout.jsx b/src/pages/logout/logout.tsx
similarity index 83%
rename from src/pages/logout/logout.jsx
rename to src/pages/logout/logout.tsx
index 1aadf8f..5e02918 100644
--- a/src/pages/logout/logout.jsx
+++ b/src/pages/logout/logout.tsx
@@ -1,11 +1,11 @@
 import React, { useEffect, useState } from 'react';
-import { useDispatch } from 'react-redux';
 import { Redirect } from 'react-router-dom';
 
 import { signOut } from '../../services/store/slices/auth';
+import { useAppDispatch } from '../../utils/hooks';
 
 export const LogoutPage = () => {
-  const dispatch = useDispatch();
+  const dispatch = useAppDispatch();
   const [isLoading, setIsLoading] = useState(true);
 
   const init = async () => {
diff --git a/src/pages/not-found/not-found.jsx b/src/pages/not-found/not-found.tsx
similarity index 100%
rename from src/pages/not-found/not-found.jsx
rename to src/pages/not-found/not-found.tsx
diff --git a/src/pages/profile/profile.jsx b/src/pages/profile/profile.tsx
similarity index 86%
rename from src/pages/profile/profile.jsx
rename to src/pages/profile/profile.tsx
index 2c19c00..e8f3a65 100644
--- a/src/pages/profile/profile.jsx
+++ b/src/pages/profile/profile.tsx
@@ -1,5 +1,4 @@
 import React, { useState } from 'react';
-import { useDispatch, useSelector } from 'react-redux';
 import { Switch, Route } from 'react-router-dom';
 import styles from './profile.module.css';
 
@@ -10,24 +9,28 @@ import {
 
 import NavItem from '../../components/nav-item/nav-item';
 import { patchUser } from '../../services/store/slices/auth';
+import { useAppDispatch, useAppSelector } from '../../utils/hooks';
+import { TUserData } from '../../utils/types';
 
 export const ProfilePage = () => {
-  const dispatch = useDispatch();
-  const { user } = useSelector(state => state.auth);
+  const dispatch = useAppDispatch();
+  const { user } = useAppSelector(state => state.auth);
 
-  const currentUserData = {
-    ...user,
+  const currentUserData: TUserData = {
+    name: '',
     password: '',
+    email: '',
+    ...user,
   };
 
   const [formData, setFormData] = useState(currentUserData);
-  const [activeInput, setActiveInput] = useState(null);
+  const [activeInput, setActiveInput] = useState<null | string>(null);
 
   const formHasChanges = Object
     .entries(formData)
     .some(([key, value]) => value !== currentUserData[key]);
 
-  const onInputChange = e => {
+  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
     const { name, value } = e.target;
     const currentValue = formData[name];
 
@@ -36,7 +39,7 @@ export const ProfilePage = () => {
     }
   };
 
-  const onInputFocus = e => {
+  const onInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {
     setActiveInput(e.target.name);
   };
 
@@ -44,12 +47,12 @@ export const ProfilePage = () => {
     setActiveInput(null);
   };
 
-  const onCancelBtnClick = e => {
+  const onCancelBtnClick = (e: React.SyntheticEvent) => {
     e.preventDefault();
     setFormData(currentUserData);
   };
 
-  const onFormSubmit = e => {
+  const onFormSubmit = (e: React.FormEvent) => {
     e.preventDefault();
     dispatch(patchUser(formData))
   };
diff --git a/src/pages/register/register.jsx b/src/pages/register/register.tsx
similarity index 85%
rename from src/pages/register/register.jsx
rename to src/pages/register/register.tsx
index 3388b09..3d421aa 100644
--- a/src/pages/register/register.jsx
+++ b/src/pages/register/register.tsx
@@ -1,5 +1,5 @@
 import React, { useState } from 'react';
-import { useDispatch, useSelector } from 'react-redux';
+
 import { Link, Redirect } from 'react-router-dom';
 
 import {
@@ -8,10 +8,11 @@ import {
   Button
 } from '@ya.praktikum/react-developer-burger-ui-components';
 import { register } from '../../services/store/slices/auth';
+import { useAppDispatch, useAppSelector } from '../../utils/hooks';
 
 export const RegisterPage = () => {
-  const dispatch = useDispatch();
-  const { user } = useSelector(state => state.auth);
+  const dispatch = useAppDispatch();
+  const { user } = useAppSelector(state => state.auth);
 
   const [formData, setFormData] = useState({
     name: '',
@@ -19,12 +20,12 @@ export const RegisterPage = () => {
     password: '',
   });
 
-  const onChange = e => {
+  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {
     setFormData({ ...formData, [e.target.name]: e.target.value });
   };
 
-  const onFormSubmit = event => {
-    event.preventDefault();
+  const onFormSubmit = (e: React.FormEvent) => {
+    e.preventDefault();
     dispatch(register(formData));
   };
 
@@ -60,7 +61,6 @@ export const RegisterPage = () => {
             size="default"
           />
           <Button
-            primary={true}
             size="medium"
           >
             Зарегистрироваться
diff --git a/src/pages/reset-password/reset-password.jsx b/src/pages/reset-password/reset-password.tsx
similarity index 86%
rename from src/pages/reset-password/reset-password.jsx
rename to src/pages/reset-password/reset-password.tsx
index 3fd5527..09bb2b7 100644
--- a/src/pages/reset-password/reset-password.jsx
+++ b/src/pages/reset-password/reset-password.tsx
@@ -1,5 +1,5 @@
 import React, { useState, useRef } from 'react';
-import { useSelector } from 'react-redux';
+
 import {
   Link,
   Redirect,
@@ -13,13 +13,15 @@ import {
 } from '@ya.praktikum/react-developer-burger-ui-components';
 
 import routes from '../../routes';
+import { useAppSelector } from '../../utils/hooks';
+import { TLocationState } from '../../utils/types';
 
 export const ResetPasswordPage = () => {
   const history = useHistory();
-  const { state } = useLocation();
+  const { state } = useLocation<TLocationState>();
 
-  const passwordInputRef = useRef();
-  const { user } = useSelector(state => state.auth);
+  const passwordInputRef = useRef<HTMLInputElement>(null);
+  const { user } = useAppSelector(state => state.auth);
 
   const [formData, setFormData] = useState({
     password: '',
@@ -41,14 +43,17 @@ export const ResetPasswordPage = () => {
 
   const onPasswordInputIconClick = () => {
     togglePasswordVisibility();
-    passwordInputRef.current.focus();
+
+    if (passwordInputRef.current) {
+      passwordInputRef.current.focus();
+    }
   };
 
-  const onChange = e => {
+  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {
     setFormData({ ...formData, [e.target.name]: e.target.value });
   };
 
-  const onFormSubmit = e => {
+  const onFormSubmit = (e: React.FormEvent) => {
     e.preventDefault();
 
     const data = {
@@ -117,7 +122,7 @@ export const ResetPasswordPage = () => {
               </p>
             )
           }
-          <Button primary={true} size="medium">
+          <Button size="medium">
             Сохранить
           </Button>
         </form>
diff --git a/src/routes.js b/src/routes.ts
similarity index 86%
rename from src/routes.js
rename to src/routes.ts
index 06044e3..e581beb 100644
--- a/src/routes.js
+++ b/src/routes.ts
@@ -1,7 +1,7 @@
 const HOST = 'https://norma.nomoreparties.space';
 const PREFIX = 'api';
 
-const getRoute = (...path) => [HOST, PREFIX, ...path].join('/');
+const getRoute = (...path: string[]) => [HOST, PREFIX, ...path].join('/');
 
 const routes = {
   ingredients: getRoute('ingredients'),
diff --git a/src/services/order-context.js b/src/services/order-context.ts
similarity index 100%
rename from src/services/order-context.js
rename to src/services/order-context.ts
diff --git a/src/services/store/index.js b/src/services/store/index.ts
similarity index 59%
rename from src/services/store/index.js
rename to src/services/store/index.ts
index c826839..dd269c8 100644
--- a/src/services/store/index.js
+++ b/src/services/store/index.ts
@@ -4,3 +4,6 @@ import { rootReducer } from './slices';
 export const store = configureStore({
   reducer: rootReducer,
 });
+
+export type RootState = ReturnType<typeof store.getState>
+export type AppDispatch = typeof store.dispatch
diff --git a/src/services/store/slices/auth.js b/src/services/store/slices/auth.ts
similarity index 88%
rename from src/services/store/slices/auth.js
rename to src/services/store/slices/auth.ts
index 6b70fc5..96495f4 100644
--- a/src/services/store/slices/auth.js
+++ b/src/services/store/slices/auth.ts
@@ -1,16 +1,21 @@
-import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
+import {
+  createAsyncThunk,
+  createSlice,
+  AnyAction,
+} from '@reduxjs/toolkit';
 
 import routes from '../../../routes';
 import { deleteCookie, getCookie, setCookie } from '../../utils';
+import { TUserData } from '../../../utils/types';
 
-const setAccesTokenCookie = accessToken => {
+const setAccesTokenCookie = (accessToken: string) => {
   const TIMEOUT_IN_MINUTES = 20;
   const token = accessToken.split('Bearer ')[1];
   const expires = new Date(Date.now() + TIMEOUT_IN_MINUTES * 60 * 1000).toUTCString();
   setCookie('accessToken', token, { expires });
 };
 
-const setRefreshTokenCookie = refreshToken => {
+const setRefreshTokenCookie = (refreshToken: string) => {
   const TIMEOUT_IN_DAYS = 30;
   const expires = new Date(Date.now() + TIMEOUT_IN_DAYS * 24 * 60 * 60 * 1000).toUTCString();
   setCookie('refreshToken', refreshToken, { expires });
@@ -49,7 +54,7 @@ export const updateTokens = async () => {
 
 export const patchUser = createAsyncThunk(
   'auth/patchUser',
-  async (userData, { dispatch }) => {
+  async (userData: Partial<TUserData>, { dispatch }) => {
     const refreshToken = getCookie('refreshToken');
     const accessToken = getCookie('accessToken');
 
@@ -116,7 +121,7 @@ export const getUser = createAsyncThunk(
 
 export const register = createAsyncThunk(
   'auth/register',
-  async userData => {
+  async (userData: TUserData) => {
     const data = {
       method: 'POST',
       headers: {
@@ -134,7 +139,7 @@ export const register = createAsyncThunk(
 
 export const signIn = createAsyncThunk(
   'auth/signIn',
-  async userData => {
+  async (userData: Omit<TUserData, 'name'>) => {
     const data = {
       method: 'POST',
       headers: {
@@ -168,15 +173,33 @@ export const signOut = createAsyncThunk(
   },
 );
 
-const getUserFinallyMatcher = ({ type }) => (
+const getUserFinallyMatcher = ({ type }: AnyAction) => (
   type === getUser.fulfilled.type
   || type === getUser.rejected.type
 );
 
-const initialState = {
+type TInitialState = {
+  user: null | Omit<TUserData, 'password'>,
+  isUserLoaded: boolean;
+  errors: {
+    register: null | string,
+    signIn: null | string,
+    getUser: null | string,
+    patchUser: null | string,
+    signOut: null | string,
+  },
+}
+
+const initialState: TInitialState = {
   user: null,
   isUserLoaded: false,
-  errors: {},
+  errors: {
+    register: null,
+    signIn: null,
+    getUser: null,
+    patchUser: null,
+    signOut: null,
+  },
 };
 
 const authSlice = createSlice({
diff --git a/src/services/store/slices/createdOrder.js b/src/services/store/slices/createdOrder.js
deleted file mode 100644
index e7362e0..0000000
--- a/src/services/store/slices/createdOrder.js
+++ /dev/null
@@ -1,20 +0,0 @@
-import { createSlice } from '@reduxjs/toolkit';
-import { fetchOrder } from './currentOrder';
-
-const initialState = null;
-const orderIsCreated = action => action.type === fetchOrder.fulfilled.type;
-
-const createdOrderSlice = createSlice({
-  name: 'createdOrder',
-  initialState,
-  reducers: {
-    setCreatedOrder: (state, { payload }) =>  payload,
-  },
-  extraReducers: builder => {
-    builder
-      .addMatcher(orderIsCreated, (state, { payload }) => payload.order);
-  },
-});
-
-export const createdOrder = createdOrderSlice.reducer;
-export const { setCreatedOrder } = createdOrderSlice.actions;
diff --git a/src/services/store/slices/createdOrder.ts b/src/services/store/slices/createdOrder.ts
new file mode 100644
index 0000000..717ba12
--- /dev/null
+++ b/src/services/store/slices/createdOrder.ts
@@ -0,0 +1,27 @@
+import { createSlice, AnyAction } from '@reduxjs/toolkit';
+import { fetchOrder } from './currentOrder';
+
+type TInitialState = {
+  number: null | number;
+};
+
+const initialState: TInitialState = {
+  number: null,
+};
+
+const orderIsCreated = (action: AnyAction) => action.type === fetchOrder.fulfilled.type;
+
+const createdOrderSlice = createSlice({
+  name: 'createdOrder',
+  initialState,
+  reducers: {
+    resetCreatedOrder: () =>  initialState,
+  },
+  extraReducers: builder => {
+    builder
+      .addMatcher(orderIsCreated, (state, { payload }) => payload.order);
+  },
+});
+
+export const createdOrder = createdOrderSlice.reducer;
+export const { resetCreatedOrder } = createdOrderSlice.actions;
diff --git a/src/services/store/slices/currentOrder.js b/src/services/store/slices/currentOrder.ts
similarity index 83%
rename from src/services/store/slices/currentOrder.js
rename to src/services/store/slices/currentOrder.ts
index 926a18c..05ef076 100644
--- a/src/services/store/slices/currentOrder.js
+++ b/src/services/store/slices/currentOrder.ts
@@ -1,21 +1,26 @@
 import {
   createSlice,
   createAsyncThunk,
+  AnyAction,
 } from '@reduxjs/toolkit';
 
+import { TIngredient } from '../../../utils/types';
 import routes from '../../../routes';
 import { getCookie } from '../../utils';
 
-const generateFillingItemKey = ({ _id }) => `${_id}-${+new Date()}`;
+const generateFillingItemKey = ({ _id }: TIngredient) => `${_id}-${+new Date()}`;
 
 export const fetchOrder = createAsyncThunk(
   'currentOrder/fetchOrder',
-  async ({ filling, bun }) => {
+  async ({ filling, bun }: TInitialState) => {
     const ingredientIds = [
-      bun._id,
       ...filling.map(({ _id }) => _id),
     ];
 
+    if (bun) {
+      ingredientIds.push(bun._id)
+    }
+
     const body = JSON.stringify({
       ingredients: ingredientIds,
     });
@@ -36,12 +41,19 @@ export const fetchOrder = createAsyncThunk(
   }
 );
 
-const finallyMatcher = ({ type }) => (
+const finallyMatcher = ({ type }: AnyAction) => (
   type === fetchOrder.fulfilled.type
   || type === fetchOrder.rejected.type
 );
 
-const initialState = {
+type TInitialState = {
+  bun: null | TIngredient;
+  filling: TIngredient[];
+  isLoading: boolean;
+  hasError: boolean;
+};
+
+const initialState: TInitialState = {
   bun: null,
   filling: [],
   isLoading: false,
diff --git a/src/services/store/slices/index.js b/src/services/store/slices/index.ts
similarity index 100%
rename from src/services/store/slices/index.js
rename to src/services/store/slices/index.ts
diff --git a/src/services/store/slices/ingredients.js b/src/services/store/slices/ingredients.ts
similarity index 83%
rename from src/services/store/slices/ingredients.js
rename to src/services/store/slices/ingredients.ts
index 5e2acd8..e60d0d6 100644
--- a/src/services/store/slices/ingredients.js
+++ b/src/services/store/slices/ingredients.ts
@@ -1,9 +1,11 @@
 import {
   createSlice,
   createAsyncThunk,
+  AnyAction,
 } from '@reduxjs/toolkit';
 
 import routes from '../../../routes';
+import { TIngredient } from '../../../utils/types';
 
 export const fetchIngredients = createAsyncThunk(
   'ingredients/fetchIngredients',
@@ -21,12 +23,18 @@ export const fetchIngredients = createAsyncThunk(
   }
 );
 
-const finallyMatcher = ({ type }) => (
+const finallyMatcher = ({ type }: AnyAction) => (
   type === fetchIngredients.fulfilled.type
   || type === fetchIngredients.rejected.type
 );
 
-const initialState = {
+type TInitialState = {
+  list: TIngredient[];
+  isLoading: boolean;
+  hasError: boolean;
+};
+
+const initialState: TInitialState = {
   list: [],
   isLoading: false,
   hasError: false,
diff --git a/src/services/utils.js b/src/services/utils.ts
similarity index 58%
rename from src/services/utils.js
rename to src/services/utils.ts
index b32e2bb..b37a0d5 100644
--- a/src/services/utils.js
+++ b/src/services/utils.ts
@@ -1,16 +1,22 @@
-export const getCookie = name => {
+import { TCookieProps } from "../utils/types";
+
+export const getCookie = (name: string) => {
   const matches = document.cookie.match(
     new RegExp('(?:^|; )' + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + '=([^;]*)')
   );
   return matches ? decodeURIComponent(matches[1]) : undefined;
 };
 
-export const deleteCookie = name => {
-  setCookie(name, null, { expires: -1 });
+export const deleteCookie = (name: string) => {
+  setCookie(name, undefined, { expires: -1 });
 };
 
-export const setCookie = (name, value, props) => {
-  if (getCookie(name) && props.expires !== -1) {
+export const setCookie = (
+  name: string,
+  value: string = '',
+  props?: TCookieProps,
+) => {
+  if (getCookie(name) && props?.expires !== -1) {
     deleteCookie(name);
   }
 
@@ -24,19 +30,20 @@ export const setCookie = (name, value, props) => {
     exp = props.expires = d;
   }
 
-  if (exp && exp.toUTCString) {
+  if (exp instanceof Date) {
     props.expires = exp.toUTCString();
   }
 
   value = encodeURIComponent(value);
-  let updatedCookie = name + '=' + value;
+  let updatedCookie = `${name}=${value}`;
+
 
   for (const propName in props) {
-    updatedCookie += '; ' + propName;
+    updatedCookie += `;${propName}`;
     const propValue = props[propName];
 
     if (propValue !== true) {
-      updatedCookie += '=' + propValue;
+      updatedCookie += `=${propValue}`;
     }
   }
 
diff --git a/src/utils/hooks.ts b/src/utils/hooks.ts
new file mode 100644
index 0000000..c4d9563
--- /dev/null
+++ b/src/utils/hooks.ts
@@ -0,0 +1,5 @@
+import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
+import type { RootState, AppDispatch } from '../services/store'
+
+export const useAppDispatch = () => useDispatch<AppDispatch>()
+export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
diff --git a/src/utils/prop-types.js b/src/utils/prop-types.js
deleted file mode 100644
index 7f9cae0..0000000
--- a/src/utils/prop-types.js
+++ /dev/null
@@ -1,19 +0,0 @@
-import PropTypes from 'prop-types';
-  
-export const ingredientPropTypes = PropTypes.shape({
-  _id: PropTypes.string.isRequired,
-  name: PropTypes.string.isRequired,
-  type: PropTypes.string.isRequired,
-  proteins: PropTypes.number.isRequired,
-  fat: PropTypes.number.isRequired,
-  carbohydrates: PropTypes.number.isRequired,
-  calories: PropTypes.number.isRequired,
-  price: PropTypes.number.isRequired,
-  image: PropTypes.string.isRequired,
-  image_mobile: PropTypes.string.isRequired,
-  image_large: PropTypes.string.isRequired,
-  __v: PropTypes.number.isRequired,
-  key: PropTypes.string,
-});
-
-export const ingredientListPropTypes = PropTypes.arrayOf(ingredientPropTypes.isRequired);
diff --git a/src/utils/types.ts b/src/utils/types.ts
new file mode 100644
index 0000000..f1af61a
--- /dev/null
+++ b/src/utils/types.ts
@@ -0,0 +1,37 @@
+export type TCookieProps = {
+  path?: string;
+  domain?: string;
+  expires?: number | string | Date;
+  sameSite?: 'strict' | 'Strict' | 'lax' | 'Lax' | 'none' | 'None';
+  secure?: boolean;
+  [property: string]: any;
+};
+
+export type TIngredient = {
+  _id: string;
+  name: string;
+  type: string,
+  proteins: number,
+  fat: number,
+  carbohydrates: number,
+  calories: number,
+  price: number,
+  image: string,
+  image_mobile: string,
+  image_large: string,
+  __v: number,
+  key?: string,
+};
+
+export type TLocationState = {
+  from: {
+    pathname: string;
+  },
+};
+
+export type TUserData = {
+  [key: string]: string,
+  email: string,
+  password: string,
+  name: string,
+};
diff --git a/tsconfig.json b/tsconfig.json
index a273b0c..5709eb2 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -18,9 +18,10 @@
     "resolveJsonModule": true,
     "isolatedModules": true,
     "noEmit": true,
-    "jsx": "react-jsx"
+    "jsx": "react-jsx",
   },
   "include": [
-    "src"
+    "src",
+    "declarations"
   ]
 }
